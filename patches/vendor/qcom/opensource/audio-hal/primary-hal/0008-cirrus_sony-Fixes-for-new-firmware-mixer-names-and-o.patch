From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
Date: Sat, 13 Feb 2021 16:58:40 +0100
Subject: [PATCH] cirrus_sony: Fixes for new firmware mixer names and order

Cherry-picked from aosp/LA.UM.9.12.r1 and conflicts resolved.

The new firmware features more creativity, which means that the
mixer names have changed. Also, for some reason, when we've got
a dual amp setup, the DSP refuses to load the R-SPK firmware by
caprice if we load the L-SPK one before that, even though they
definitely have no real correlation between each other (or at
least not firmware-wise).

Even though there are *way* better ways to do this, time does
not allow me to, so this is a very fast workaround to get the
audio calibrations kicking.
---
 hal/audio_extn/cirrus_sony.c | 131 +++++++++++++++++++++++------------
 1 file changed, 88 insertions(+), 43 deletions(-)

diff --git a/hal/audio_extn/cirrus_sony.c b/hal/audio_extn/cirrus_sony.c
index 53e67e115ead862cc4db5416a3ce3b5b64c795b5..3996a08f84b711b87eed17b1901a76ed1bd257bb 100644
--- a/hal/audio_extn/cirrus_sony.c
+++ b/hal/audio_extn/cirrus_sony.c
@@ -132,7 +132,9 @@ int (*miscta_write_unit)(uint32_t id, const void *buf, uint32_t size) = NULL;
 #define CIRRUS_CTL_PROT_DIAG_Z_LOW_DIFF	"DSP1 Protection cd DIAG_Z_LOW_DIFF"
 #define CIRRUS_CTL_PROT_CAL_R		"DSP1 Protection cd CAL_R"
 #define CIRRUS_CTL_PROT_CAL_STATUS	"DSP1 Protection CAL_STATUS"
+#define CIRRUS_CTL_PROT_CAL_STATUS_CD	"DSP1 Protection cd CAL_STATUS"
 #define CIRRUS_CTL_PROT_CAL_CHECKSUM	"DSP1 Protection CAL_CHECKSUM"
+#define CIRRUS_CTL_PROT_CAL_CHECKSUM_CD	"DSP1 Protection cd CAL_CHECKSUM"
 
 #define CIRRUS_CTL_PROT_CSPL_ERRORNO	"DSP1 Protection cd CSPL_ERRORNO"
 
@@ -445,7 +447,7 @@ static int cirrus_set_mixer_value_by_name(char* ctl_name, int value) {
 
     ctl_config = mixer_get_ctl_by_name(card_mixer, ctl_name);
     if (!ctl_config) {
-        ALOGE("%s: Cannot get mixer control %s", __func__, ctl_name);
+        ALOGD("%s: Cannot get mixer control %s", __func__, ctl_name);
         ret = -1;
         goto exit;
     }
@@ -785,8 +787,7 @@ static int cirrus_exec_fw_download(const char *fw_type, const char *channel,
         ALOGE("%s: Cannot reset %s status", __func__, ctl_name);
         goto exit;
     }
-
-    usleep(5000);
+    usleep(10000);
 
     ret = cirrus_format_mixer_name("DSP1 Preload Switch",
                                    channel, &ctl_name, ctl_sz);
@@ -797,7 +798,7 @@ static int cirrus_exec_fw_download(const char *fw_type, const char *channel,
         ALOGE("%s: Cannot reset %s", __func__, ctl_name);
         goto exit;
     }
-    usleep(5000);
+    usleep(10000);
 
     /* Determine what firmware to load and configure DSP */
     ret = cirrus_format_mixer_name("DSP1 Firmware", channel, &ctl_name, ctl_sz);
@@ -857,6 +858,9 @@ retry_fw:
 
     if ((cspl_ena[0] + cspl_ena[1] + cspl_ena[2]) == 0 && cspl_ena[3] == 1) {
         ALOGI("%s: Cirrus %s Firmware Download SUCCESS.", __func__, fw_type);
+
+        /* Wait for the hardware to stabilize */
+        usleep(100000);
         ret = 0;
     } else {
         /*
@@ -872,6 +876,7 @@ retry_fw:
          */
         if (retry < CIRRUS_FIRMWARE_MAX_RETRY) {
             retry++;
+            ALOGI("%s: Retrying...\n", __func__);
             goto retry_fw;
         }
 
@@ -883,7 +888,6 @@ retry_fw:
 exit:
     free(ctl_name);
 
-    usleep(10000);
     return ret;
 }
 
@@ -1143,6 +1147,67 @@ exit:
     return ret;
 }
 
+static int cirrus_write_cal_checksum(struct cirrus_cal_result_t *cal, char *lr)
+{
+    char *ctl_name;
+    int ctl_sz = CIRRUS_CTL_NAME_BUF;
+    int ret;
+
+    ctl_name = (char *)calloc(ctl_sz, sizeof(char));
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_CHECKSUM, lr,
+                                   &ctl_name, ctl_sz);
+    if (ret < 0)
+        goto exit;
+
+    ret = cirrus_set_mixer_array_by_name(ctl_name,
+                                         cal->checksum, 4);
+    if (ret >= 0)
+        goto exit;
+
+    /*
+     * On some firmwares the creativity level is high and the mixer
+     * names will be different.
+     */
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_CHECKSUM_CD, lr,
+                                   &ctl_name, ctl_sz);
+    if (ret < 0)
+        goto exit;
+
+    ret = cirrus_set_mixer_array_by_name(ctl_name, cal->checksum, 4);
+exit:
+
+    free(ctl_name);
+    return ret;
+}
+
+static int cirrus_write_cal_status(struct cirrus_cal_result_t *cal, char *lr)
+{
+    char *ctl_name;
+    int ctl_sz = CIRRUS_CTL_NAME_BUF;
+    int ret;
+
+    ctl_name = (char *)calloc(ctl_sz, sizeof(char));
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_STATUS, lr,
+                                   &ctl_name, ctl_sz);
+    if (ret < 0)
+        goto exit;
+
+    ret = cirrus_set_mixer_array_by_name(ctl_name,
+                                         cal->status, 4);
+    if (ret >= 0)
+        goto exit;
+
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_STATUS_CD, lr,
+                                   &ctl_name, ctl_sz);
+    if (ret < 0)
+        goto exit;
+
+    ret = cirrus_set_mixer_array_by_name(ctl_name, cal->status, 4);
+exit:
+    free(ctl_name);
+    return ret;
+}
+
 static int cirrus_do_fw_mono_download(int do_reset) {
     bool cal_valid = false, status_ok = false, checksum_ok = false;
     int ret = 0;
@@ -1202,17 +1267,17 @@ static int cirrus_do_fw_stereo_download(int do_reset) {
     ALOGI("%s: Sending speaker protection stereo firmware", __func__);
 
     ctl_name = (char *)calloc(ctl_sz, sizeof(char));
-    ret = cirrus_exec_fw_download("Protection", "L", do_reset);
+    ret = cirrus_exec_fw_download("Protection", "R", do_reset);
     if (ret != 0) {
-        ALOGE("%s: Cannot send Protection L firmware: bailing out.",
+        ALOGE("%s: Cannot send Protection R firmware: bailing out.",
               __func__);
         free(ctl_name);
         return -EINVAL;
     }
 
-    ret = cirrus_exec_fw_download("Protection", "R", do_reset);
+    ret = cirrus_exec_fw_download("Protection", "L", do_reset);
     if (ret != 0) {
-        ALOGE("%s: Cannot send Protection R firmware: bailing out.",
+        ALOGE("%s: Cannot send Protection L firmware: bailing out.",
               __func__);
         free(ctl_name);
         return -EINVAL;
@@ -1228,69 +1293,49 @@ static int cirrus_do_fw_stereo_download(int do_reset) {
     if (ret < 0)
         goto exit;
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_R, "L",
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_R, "R",
                                     &ctl_name, ctl_sz);
     if (ret < 0)
         return ret;
     ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkl.cal_r, 4);
+                                         &handle.spkr.cal_r, 4);
     if (ret < 0) {
-        ALOGE("%s: Cannot set Z-L calibration", __func__);
+        ALOGE("%s: Cannot set Z-R calibration", __func__);
         goto exit;
     }
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_R, "R",
-                                    &ctl_name, ctl_sz);
-    if (ret < 0)
-        return ret;
-    ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkr.cal_r, 4);
+    ret = cirrus_write_cal_status(&handle.spkr, "R");
     if (ret < 0) {
-        ALOGE("%s: Cannot set Z-R calibration", __func__);
+        ALOGE("%s: Cannot set calibration R status", __func__);
         goto exit;
     }
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_STATUS, "L",
-                                    &ctl_name, ctl_sz);
-    if (ret < 0)
-        return ret;
-    ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkl.status, 4);
+    ret = cirrus_write_cal_checksum(&handle.spkr, "R");
     if (ret < 0) {
-        ALOGE("%s: Cannot set calibration L status", __func__);
+        ALOGE("%s: Cannot set checksum R", __func__);
         goto exit;
     }
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_STATUS, "R",
+    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_R, "L",
                                     &ctl_name, ctl_sz);
     if (ret < 0)
         return ret;
     ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkr.status, 4);
+                                         &handle.spkl.cal_r, 4);
     if (ret < 0) {
-        ALOGE("%s: Cannot set calibration R status", __func__);
+        ALOGE("%s: Cannot set Z-L calibration", __func__);
         goto exit;
     }
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_CHECKSUM, "L",
-                                    &ctl_name, ctl_sz);
-    if (ret < 0)
-        return ret;
-    ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkl.checksum, 4);
+    ret = cirrus_write_cal_status(&handle.spkl, "L");
     if (ret < 0) {
-        ALOGE("%s: Cannot set checksum L", __func__);
+        ALOGE("%s: Cannot set calibration L status", __func__);
         goto exit;
     }
 
-    ret = cirrus_format_mixer_name(CIRRUS_CTL_PROT_CAL_CHECKSUM, "R",
-                                    &ctl_name, ctl_sz);
-    if (ret < 0)
-        return ret;
-    ret += cirrus_set_mixer_array_by_name(ctl_name,
-                                         &handle.spkr.checksum, 4);
+    ret = cirrus_write_cal_checksum(&handle.spkl, "L");
     if (ret < 0) {
-        ALOGE("%s: Cannot set checksum R", __func__);
+        ALOGE("%s: Cannot set checksum L", __func__);
         goto exit;
     }
 
